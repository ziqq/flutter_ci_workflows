name: "Publish to pub.dev"

env:
  PUBSPEC_PATH: './pubspec.yaml'
  CHANGELOG_PATH: './CHANGELOG.md'

on:
  workflow_call:
    inputs:
      PANA_TOTAL:
        type: string
        required: true
    secrets:
      PUB_CREDENTIAL_JSON:
        required: true
      PUB_OAUTH_ACCESS_TOKEN:
        required: true
      PUB_OAUTH_REFRESH_TOKEN:
        required: true

jobs:
  check:
    runs-on: ubuntu-latest
    env:
      TAG: ''
      PUBSPEC_VERSION: ''
      CHANGELOG_VERSION: ''
    steps:
      - name: üöÇ Checkout
        uses: actions/checkout@v3

      - name: üéØ Get tag
        id: get_tag
        run: |
          TAG=$(git describe --tags --abbrev=0 --exact-match --match 'v*' HEAD | cut -c 2-)
          echo "TAG=$TAG" >> $GITHUB_ENV
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: ‚ùî Tag is empty
        if: ${{ steps.get_tag.outputs.tag == '' }}
        run: |
          echo "::error::Tag not found!"
          exit 1

      - name: üí¨ Echo tag
        run: |
          echo "TAG: ${{ env.TAG }}"

      - name: üöÇ Get pubspec version
        id: get_pubspec_version
        run: |
          PUBSPEC_VERSION=$(grep '^version:' $PUBSPEC_PATH | cut -f2 -d":" | xargs)
          echo "PUBSPEC_VERSION=$PUBSPEC_VERSION" >> $GITHUB_ENV
          echo "pubspec_version=$PUBSPEC_VERSION" >> $GITHUB_OUTPUT

      - name: üîé Pubspec version is empty
        if: ${{ steps.get_pubspec_version.outputs.pubspec_version == '' }}
        run: |
          echo "::error::Pubspec version not found!"
          exit 1

      - name: üîé Echo pubspec version
        run: |
          echo "Pubspec version: ${{ env.PUBSPEC_VERSION }}"

      - name: üöÇ Get changelog version
        id: get_changelog_version
        run: |
          CHANGELOG_VERSION=$(grep -o '^## [^ ]*' $CHANGELOG_PATH | head -n1 | cut -c 4- | xargs)
          echo "CHANGELOG_VERSION=$CHANGELOG_VERSION" >> $GITHUB_ENV
          echo "changelog_version=$CHANGELOG_VERSION" >> $GITHUB_OUTPUT

      - name: üîé Changelog version is empty
        if: ${{ steps.get_changelog_version.outputs.changelog_version == '' }}
        run: |
          echo "::error::Changelog version not found!"
          exit 1

      - name: üí¨ Echo changelog version
        run: |
          echo "Changelog version: ${{ env.CHANGELOG_VERSION }}"

      - name: ‚ùå Compare versions failed
        if: ${{ steps.get_pubspec_version.outputs.pubspec_version != env.TAG || steps.get_changelog_version.outputs.changelog_version != env.TAG }}
        run: |
          echo "TAG: ${{ env.TAG }}"
          echo "CHANGELOG: ${{ env.CHANGELOG_VERSION }}"
          echo "PUBSPEC: ${{ env.PUBSPEC_VERSION }}"
          echo "::error::The versions don't match!"
          exit 1

      - name: ‚úÖ Compare versions success
        run: |
          echo "Versions match:"
          echo "TAG: ${{ env.TAG }}"
          echo "CHANGELOG: ${{ env.CHANGELOG_VERSION }}"
          echo "PUBSPEC: ${{ env.PUBSPEC_VERSION }}"

  pana:
    needs: check
    runs-on: ubuntu-latest
    steps:
      - name: üë∑ Set up Repository
        uses: actions/checkout@v3

      - name: üë∑ Set up Dart
        uses: dart-lang/setup-dart@v1.3

      - name: üë∑ Install Flutter
        uses: subosito/flutter-action@v1
        with:
          channel: "stable"

      - name: üë∑ Install dependencies
        run: flutter pub get

      - name: üë∑ Install Pana
        run: |
          dart pub get
          dart pub global activate pana

      - name: üîé Verify pub score
        run: |
          PANA=$(pana . --no-warning)
          PANA_SCORE=$(echo "$PANA" | grep -o 'Points: [0-9]*/[0-9]*' | grep -o '[0-9]*/[0-9]*')
          echo "score: $PANA_SCORE"
          IFS='/' read -r SCORE TOTAL <<< "$PANA_SCORE"
          MINIMUM_SCORE='${{ inputs.PANA_TOTAL }}'
          if [ "$SCORE" -lt "$MINIMUM_SCORE" ]; then
            echo "Minimum score $MINIMUM_SCORE was not met!"
            exit 1
          fi

  publishing:
    needs: [ check, pana ]
    runs-on: ubuntu-latest
    steps:
      - name: üöÇ Checkout
        uses: actions/checkout@v3

      - name: üíæ Publish flutter package
        uses: k-paxian/dart-package-publisher@master
        with:
          credentialJson: ${{ secrets.PUB_CREDENTIAL_JSON }}
          accessToken: ${{ secrets.PUB_OAUTH_ACCESS_TOKEN }}
          refreshToken: ${{ secrets.PUB_OAUTH_REFRESH_TOKEN }}
          dryRunOnly: false
          # flutter: true
          # flutterBranch: 'stable'
